Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 (id)
ii. Hours = 1562 (business_id)
iii. Category = 2643 (business_id)
iv. Attribute = 1115 (business_id)
v. Review = 10000 (id), 8090 (business_id foreign key), 9581 (user_id foreign key)
vi. Checkin = 493 (business_id)
vii. Photo = 10000 (id), 6493 (business_id)
viii. Tip = 537 (user_id foreign key), 3979 (business_id foreign key)
ix. User = 10000 (id)
x. Friend = 11 (user_id)
xi. Elite_years = 2780 (user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:
	
select *
from user
where id is null
    or name is null 
    or review_count is null 
    or yelping_since is null 
    or useful is null 
    or funny is null 
    or cool is null 
    or fans is null 
    or average_stars is null 
    or compliment_hot is null
    or compliment_more is null 
    or compliment_profile is null 
    or compliment_cute is null 
    or compliment_list is null 
    or compliment_note is null 
    or compliment_plain is null 
    or compliment_cool is null 
    or compliment_funny is null 
    or compliment_writer is null 
    or compliment_photos is null;


4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1	    max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
select 
	city, 
	sum(review_count) 
from business
group by city
order by sum(review_count) desc;
	
	Copy and Paste the Result Below:
	
+-----------------+-------------------+
| city            | sum(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

select 
    stars, 
    sum(review_count) as distribution
from business
where city = "Avon"
group by stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

 stars | distribution |
+-------+--------------+
|   1.5 |           10 |
|   2.5 |            6 |
|   3.5 |           88 |
|   4.0 |           21 |
|   4.5 |           31 |
|   5.0 |            3 |

ii. Beachwood

SQL code used to arrive at answer:

select 
    stars, 
    sum(review_count) as distribution
from business
where city = "Beachwood"
group by stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
 stars | distribution |
+-------+--------------+
|   2.0 |            8 |
|   2.5 |            3 |
|   3.0 |           11 |
|   3.5 |            6 |
|   4.0 |           69 |
|   4.5 |           17 |
|   5.0 |           23 |

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
select 
    name, 
    review_count
from user
order by review_count desc
limit 3;
		
	Copy and Paste the Result Below:
		
select 
    name, 
    review_count
from user
order by review_count desc
limit 3;

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
  name       | review_count | fans |  By adding the fans column to the query, it looks like review_count and fans have a positive correlation.
+------------+--------------+------+  While there are some low fan numbers for top users, the average trend is more fans the higher the review_count.
| Gerald     |         2000 |  253 |
| .Hon       |         1246 |  101 |
| eric       |         1116 |   16 |
| Roanna     |         1039 |  104 |
| Dominic    |          836 |   37 |
| Lissa      |          834 |  120 |
| Alison     |          775 |   61 |
| Sui        |          754 |   78 |
| Crissy     |          676 |   25 |
| Joc        |          652 |   49 |
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: More review with the word "love"

	
	SQL code used to arrive at answer:
	
First Query:

select count(id)
from review
where text like '%love%';

Second Query:

select count(id)
from review
where text like '%hate%';
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
select name, fans
from user
order by fans desc
limit 10;

	Copy and Paste the Result Below:
-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

	There were two businesses returned from my query with similar distribution of hours, but the business with 3 stars is open 
	slightly earlier than the 4 star business on weekends.

ii. Do the two groups you chose to analyze have a different number of reviews?
   
	The 4 star business had half the reviews of the 3 star business.     
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	No, the two business are in different zip codes.

SQL code used for analysis:

select 
    business.name, 
    business.review_count, 
    business.stars, 
    business.city, 
    business.postal_code, 
    category.category,
    hours.hours
from business
inner join category 
on business.id = category.business_id
inner join hours 
on business.id = hours.business_id

where category.category = "Restaurants"
and business.city = "Chandler"
order by stars desc;
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
        
	The closed businesses appear to be in the nightlife and bars categories, among others.  
         
ii. Difference 2:

	The open business have higher review counts than closed businesses.
         
         
SQL code used for analysis:

select 
    business.is_open, 
    count(business.stars) as starcount, 
    review_count, 
    category.category
from business
inner join category
on business.id = category.business_id
group by category.category
order by starcount desc;
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
        
	Examining the relationship between yelp user reviews and closed businesses. 
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
    
	The data needed for my analysis is review star rating, business name, business star rating, and business open/close status.  
	I chose to include both user review star rating and business star rating because I think it gives a complete picture of rating.
	My goal was to show the distribution of stars for closed businessses.  It looks like a normal bell curve distribution with most closed
	businesses obtaining a 2.5 - 4.0 star rating.  With a lot of businesses in the 4+ star bracket, there is more to their open/close status than
	yelp reviews alone.
                  
iii. Output of your finished dataset:
         
	----------------+------------+-------+---------+
| avg_user_review | businesses | stars | is_open |
+-----------------+------------+-------+---------+
|             5.0 |          1 |   5.0 |       0 |
|   4.66666666667 |         12 |   4.5 |       0 |
|   4.13333333333 |         15 |   4.0 |       0 |
|    3.4347826087 |         23 |   3.5 |       0 |
|             3.0 |         14 |   2.5 |       0 |
|             2.8 |          5 |   3.0 |       0 |
|             1.0 |          1 |   2.0 |       0 |
+-----------------+------------+-------+---------+
         
iv. Provide the SQL code you used to create your final dataset:

select 
    avg(review.stars) as avg_user_review, 
    count(business.name) as businesses, 
    business.stars,
    business.is_open
from review
inner join business
on review.business_id = business.id
where business.is_open = 0
group by business.stars
order by avg_user_review desc;